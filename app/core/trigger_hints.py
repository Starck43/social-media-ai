"""
Hints and documentation for trigger configuration.

Provides user-friendly explanations for each trigger type and its configuration.
"""
from app.types import BotTriggerType

TRIGGER_HINTS = {
	BotTriggerType.KEYWORD_MATCH: {
		"description": "–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ç–µ–Ω—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞",
		"config_example": {
			"keywords": ["–∂–∞–ª–æ–±–∞", "–ø—Ä–æ–±–ª–µ–º–∞", "–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"],
			"mode": "any",  # "any" = —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–ª–æ–≤–æ, "all" = –≤—Å–µ —Å–ª–æ–≤–∞
			"case_sensitive": False  # –£—á–∏—Ç—ã–≤–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä
		},
		"use_cases": [
			"–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤",
			"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º",
			"–ü–æ–∏—Å–∫ –∫–ª—é—á–µ–≤—ã—Ö —Ç–µ–º"
		]
	},
	
	BotTriggerType.SENTIMENT_THRESHOLD: {
		"description": "–í—ã–ø–æ–ª–Ω—è—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º —É—Ä–æ–≤–Ω–µ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏",
		"config_example": {
			"threshold": 0.3,  # –ü–æ—Ä–æ–≥ –æ—Ç 0.0 –¥–æ 1.0
			"direction": "below"  # "below" = –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞, "above" = –≤—ã—à–µ –ø–æ—Ä–æ–≥–∞
		},
		"use_cases": [
			"–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã —Ç–æ–ª—å–∫–æ –Ω–∞ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –æ—Ç–∑—ã–≤—ã (< 0.3)",
			"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∑—ã–≤–∞—Ö (> 0.7)",
			"–ú–æ–¥–µ—Ä–∞—Ü–∏—è –ø—Ä–∏ –Ω–∏–∑–∫–æ–π —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"
		],
		"note": "–†–∞–±–æ—Ç–∞–µ—Ç –ü–û–°–õ–ï –∞–Ω–∞–ª–∏–∑–∞. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç, –¥–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —É—Å–ª–æ–≤–Ω–æ."
	},
	
	BotTriggerType.ACTIVITY_SPIKE: {
		"description": "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª—å–Ω–æ–≥–æ –≤—Å–ø–ª–µ—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
		"config_example": {
			"baseline_period_hours": 24,  # –ü–µ—Ä–∏–æ–¥ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ baseline
			"spike_multiplier": 3.0  # –í–æ —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –±–æ–ª—å—à–µ –Ω–æ—Ä–º—ã
		},
		"use_cases": [
			"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –≤–∏—Ä—É—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
			"–ê–ª–µ—Ä—Ç—ã –ø—Ä–∏ –∫—Ä–∏–∑–∏—Å–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö",
			"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–Ω–æ–º–∞–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
		],
		"note": "–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –æ–±—ä–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º —Å—Ä–µ–¥–Ω–∏–º."
	},
	
	BotTriggerType.USER_MENTION: {
		"description": "–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ç–µ–Ω—Ç —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
		"config_example": {
			"usernames": ["@brand", "@support", "company"],
			"mode": "any"  # "any" = –ª—é–±–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ
		},
		"use_cases": [
			"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –±—Ä–µ–Ω–¥–∞",
			"–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏–π –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ",
			"–ê–Ω–∞–ª–∏–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤"
		]
	},
	
	BotTriggerType.TIME_BASED: {
		"description": "–ó–∞–ø—É—Å–∫ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é (—É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ collection_interval_hours)",
		"config_example": {},
		"use_cases": [
			"–†–µ–≥—É–ª—è—Ä–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞",
			"–ü–ª–∞–Ω–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã"
		],
		"note": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª–µ '–ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–±–æ—Ä–∞ (—á–∞—Å—ã)' –≤–º–µ—Å—Ç–æ trigger_config."
	},
	
	BotTriggerType.MANUAL: {
		"description": "–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –±–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π",
		"config_example": {},
		"use_cases": [
			"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤",
			"–†—É—á–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É"
		],
		"note": "–ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
	},
}


SCOPE_HINTS = {
	"sentiment_config": {
		"description": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏",
		"parameters": {
			"categories": {
				"type": "list[str]",
				"description": "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
				"default": ["positive", "negative", "neutral"],
				"example": ["positive", "negative", "neutral", "mixed"]
			},
			"threshold": {
				"type": "float",
				"description": "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ (0.0 - 1.0)",
				"default": 0.7,
				"example": 0.8
			}
		}
	},
	
	"trends_config": {
		"description": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–æ–≤",
		"parameters": {
			"min_mentions": {
				"type": "int",
				"description": "–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —Ç—Ä–µ–Ω–¥–∞",
				"default": 5,
				"example": 10
			},
			"time_window_hours": {
				"type": "int",
				"description": "–í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (—á–∞—Å—ã)",
				"default": 24,
				"example": 48
			}
		}
	},
	
	"engagement_config": {
		"description": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏",
		"parameters": {
			"metrics": {
				"type": "list[str]",
				"description": "–ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
				"default": ["likes", "comments", "shares"],
				"example": ["likes", "comments", "shares", "views"]
			}
		}
	},
	
	"keywords_config": {
		"description": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤",
		"parameters": {
			"keywords": {
				"type": "list[str]",
				"description": "–°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –∞–≤—Ç–æ–∏–∑–≤–ª–µ—á–µ–Ω–∏—è)",
				"default": [],
				"example": ["–ø—Ä–æ–¥—É–∫—Ç", "—Ü–µ–Ω–∞", "–∫–∞—á–µ—Å—Ç–≤–æ"]
			},
			"max_keywords": {
				"type": "int",
				"description": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–≤–ª–µ–∫–∞–µ–º—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤",
				"default": 10,
				"example": 15
			}
		}
	},
	
	"topics_config": {
		"description": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–µ–º",
		"parameters": {
			"max_topics": {
				"type": "int",
				"description": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–º",
				"default": 5,
				"example": 10
			}
		}
	},
	
	"toxicity_config": {
		"description": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏",
		"parameters": {
			"threshold": {
				"type": "float",
				"description": "–ü–æ—Ä–æ–≥ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏ –¥–ª—è –∞–ª–µ—Ä—Ç–∞ (0.0 - 1.0)",
				"default": 0.7,
				"example": 0.8
			}
		}
	}
}


def get_trigger_hint(trigger_type: BotTriggerType) -> dict:
	"""Get hint for specific trigger type."""
	return TRIGGER_HINTS.get(trigger_type, {})


def get_scope_hint(analysis_type: str) -> dict:
	"""Get hint for specific analysis type scope."""
	return SCOPE_HINTS.get(f"{analysis_type}_config", {})


def format_hint_as_html(hint: dict) -> str:
	"""Format hint as HTML for admin panel."""
	html = f"<div class='hint'>"
	html += f"<p><strong>{hint.get('description', '')}</strong></p>"
	
	if "config_example" in hint:
		import json
		example = json.dumps(hint["config_example"], indent=2, ensure_ascii=False)
		html += f"<pre>{example}</pre>"
	
	if "use_cases" in hint:
		html += "<p><strong>–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:</strong></p><ul>"
		for use_case in hint["use_cases"]:
			html += f"<li>{use_case}</li>"
		html += "</ul>"
	
	if "note" in hint:
		html += f"<p class='note'>üìù {hint['note']}</p>"
	
	html += "</div>"
	return html
