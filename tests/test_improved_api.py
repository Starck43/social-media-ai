"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ API:
1. Prefetch —Å queryset= (Django-style)
2. –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ to_select() –≤–º–µ—Å—Ç–æ _build_statement()
"""
import asyncio
from app.models import Source
from app.models.managers.base_manager import prefetch


async def test_prefetch_with_queryset():
    """–¢–µ—Å—Ç prefetch —Å queryset (Django-style)"""
    print("\n" + "="*80)
    print("–¢–ï–°–¢ 1: Prefetch —Å queryset= (Django-style)")
    print("="*80)
    
    pk = 1
    
    # –í–∞—Ä–∏–∞–Ω—Ç 1: –° queryset (Django-style) ‚úÖ –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø
    print("\n‚úÖ –í–∞—Ä–∏–∞–Ω—Ç 1: prefetch —Å queryset=")
    monitored_prefetch = prefetch(
        "monitored_users",
        queryset=Source.objects.exclude(id=pk)  # –ö–∞–∫ –≤ Django!
    )
    print(f"   prefetch('monitored_users', queryset=Source.objects.exclude(id={pk}))")
    print(f"   –ì–∏–±–∫–æ: –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±—ã–µ –º–µ—Ç–æ–¥—ã QuerySet!")
    
    # –í–∞—Ä–∏–∞–Ω—Ç 2: –° filters (–ø—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–±)
    print("\n‚úÖ –í–∞—Ä–∏–∞–Ω—Ç 2: prefetch —Å filters=")
    monitored_prefetch_2 = prefetch(
        "monitored_users",
        filters={"id__ne": pk}  # –ü—Ä–æ—â–µ, –Ω–æ –º–µ–Ω–µ–µ –≥–∏–±–∫–æ
    )
    print(f"   prefetch('monitored_users', filters={{'id__ne': {pk}}})")
    print(f"   –ü—Ä–æ—â–µ –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö —Å–ª—É—á–∞–µ–≤")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–∏–±–∫–æ—Å—Ç–∏ queryset
    print("\n‚úÖ –í–∞—Ä–∏–∞–Ω—Ç 3: —Å–ª–æ–∂–Ω—ã–π queryset")
    complex_prefetch = prefetch(
        "monitored_users",
        queryset=(Source.objects
            .exclude(id=pk)
            .filter(is_active=True)
            .order_by(Source.name)
        )
    )
    print(f"   prefetch('monitored_users',")
    print(f"       queryset=Source.objects.exclude(id={pk})")
    print(f"           .filter(is_active=True)")
    print(f"           .order_by(Source.name)")
    print(f"   )")
    print(f"   –ú–æ–∂–Ω–æ —Å—Ç—Ä–æ–∏—Ç—å —Å–ª–æ–∂–Ω—ã–µ —Ü–µ–ø–æ—á–∫–∏!")


def test_to_select_public_api():
    """–¢–µ—Å—Ç –ø—É–±–ª–∏—á–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ to_select()"""
    print("\n" + "="*80)
    print("–¢–ï–°–¢ 2: –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ .to_select()")
    print("="*80)
    
    # ‚ùå –ü–õ–û–•–û: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
    print("\n‚ùå –ë–´–õ–û (–ø–ª–æ—Ö–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞):")
    print("   stmt = await qs._build_statement()  # –ó–∞—â–∏—â–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥!")
    
    # ‚úÖ –•–û–†–û–®–û: –ø—É–±–ª–∏—á–Ω—ã–π API
    print("\n‚úÖ –°–¢–ê–õ–û (–ø—Ä–∞–≤–∏–ª—å–Ω–æ):")
    print("   stmt = qs.to_select()  # –ü—É–±–ª–∏—á–Ω—ã–π API!")
    
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    print("\nüìù –ü—Ä–∏–º–µ—Ä –≤ admin views:")
    print("""
    def list_query(self, request: Request) -> Select:
        return User.objects.filter(is_active=True).to_select()
    """)
    
    # –†–µ–∞–ª—å–Ω—ã–π –ø—Ä–∏–º–µ—Ä
    print("\nüîç –†–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å:")
    stmt = Source.objects.filter(is_active=True).to_select()
    print(f"   –¢–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {type(stmt)}")
    print(f"   –≠—Ç–æ SQLAlchemy Select: {stmt.__class__.__name__}")


def test_admin_views_pattern():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –¥–ª—è admin views"""
    print("\n" + "="*80)
    print("–¢–ï–°–¢ 3: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è Admin Views")
    print("="*80)
    
    print("\nüìã SourceAdmin.list_query():")
    print("""
    def list_query(self, request: Request) -> Select:
        return Source.objects.prefetch_related(
            "monitored_users",
            "tracked_in_sources",
        ).to_select()
    """)
    
    print("\nüìã SourceAdmin.details_query() —Å Django-style prefetch:")
    print("""
    def details_query(self, request: Request) -> Select:
        pk = int(request.path_params["pk"])
        
        # Django-style!
        monitored_prefetch = prefetch(
            "monitored_users",
            queryset=Source.objects.exclude(id=pk)
        )
        
        return (Source.objects
            .prefetch_related(
                monitored_prefetch,
                "tracked_in_sources",
                "analytics",
                "platform",
            )
            .filter(id=pk)
            .to_select()
        )
    """)
    
    print("\n‚úÖ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:")
    print("   1. –ú–µ—Ç–æ–¥—ã –ù–ï async (SQLAdmin —Ç—Ä–µ–±—É–µ—Ç sync)")
    print("   2. –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π API to_select()")
    print("   3. Prefetch —Å queryset= –∫–∞–∫ –≤ Django")
    print("   4. –ß–∏—Ç–∞–µ–º—ã–µ —Ü–µ–ø–æ—á–∫–∏ –º–µ—Ç–æ–¥–æ–≤")


def test_comparison():
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –∏ –Ω–æ–≤–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞"""
    print("\n" + "="*80)
    print("–°–†–ê–í–ù–ï–ù–ò–ï: –°—Ç–∞—Ä—ã–π vs –ù–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥")
    print("="*80)
    
    print("\n‚ùå –°–¢–ê–†–´–ô –ü–û–î–•–û–î:")
    print("""
    # 1. –ó–∞—â–∏—â–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥
    async def details_query(self, request):
        qs = Source.objects.filter(...)
        return await qs._build_statement()  # ‚ùå –ó–∞—â–∏—â–µ–Ω–Ω—ã–π!
    
    # 2. Prefetch —Ç–æ–ª—å–∫–æ —Å filters
    prefetch = Prefetch(
        "monitored_users",
        queryset=Source.objects.exclude(id=pk)  # ‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–ª–æ!
    )
    """)
    
    print("\n‚úÖ –ù–û–í–´–ô –ü–û–î–•–û–î:")
    print("""
    # 1. –ü—É–±–ª–∏—á–Ω—ã–π API
    def details_query(self, request):
        return Source.objects.filter(...).to_select()  # ‚úÖ –ü—É–±–ª–∏—á–Ω—ã–π!
    
    # 2. Prefetch —Å queryset (Django-style)
    monitored = prefetch(
        "monitored_users",
        queryset=Source.objects.exclude(id=pk)  # ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç!
    )
    
    # 3. –ò–ª–∏ —Å filters (–ø—Ä–æ—â–µ)
    monitored = prefetch(
        "monitored_users",
        filters={"id__ne": pk}  # ‚úÖ –¢–æ–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!
    )
    """)


def test_flexibility_demo():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–∏–±–∫–æ—Å—Ç–∏"""
    print("\n" + "="*80)
    print("–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø: –ì–∏–±–∫–æ—Å—Ç—å queryset –≤ prefetch")
    print("="*80)
    
    examples = [
        ("–ü—Ä–æ—Å—Ç–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ", 
         "prefetch('users', queryset=Source.objects.exclude(id=1))"),
        
        ("–° —Ñ–∏–ª—å—Ç—Ä–æ–º",
         "prefetch('users', queryset=Source.objects.filter(is_active=True))"),
        
        ("–°–ª–æ–∂–Ω–∞—è —Ü–µ–ø–æ—á–∫–∞",
         """prefetch('users', queryset=
    Source.objects
        .filter(is_active=True)
        .exclude(source_type='GROUP')
        .order_by(Source.name)
        .limit(10)
)"""),
        
        ("–° lookups",
         """prefetch('users', queryset=
    Source.objects.filter(
        id__in=[1,2,3],
        name__contains='test'
    )
)"""),
    ]
    
    for title, code in examples:
        print(f"\n‚úÖ {title}:")
        print(f"   {code}")


def test_real_world_example():
    """–†–µ–∞–ª—å–Ω—ã–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    print("\n" + "="*80)
    print("–†–ï–ê–õ–¨–ù–´–ô –ü–†–ò–ú–ï–†: –°–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å –≤ admin")
    print("="*80)
    
    print("""
class SourceAdmin(BaseAdmin):
    def details_query(self, request: Request) -> Select:
        pk = int(request.path_params["pk"])
        user_id = request.query_params.get("user_id")
        
        # –ë–∞–∑–æ–≤—ã–π prefetch –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        monitored_qs = Source.objects.exclude(id=pk)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω user_id
        if user_id:
            monitored_qs = monitored_qs.filter(
                id__in=get_user_monitored_ids(user_id)
            )
        
        # –°–æ–∑–¥–∞–µ–º prefetch —Å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º queryset
        monitored_prefetch = prefetch(
            "monitored_users",
            queryset=monitored_qs
        )
        
        # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ç–æ–ª—å–∫–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        analytics_prefetch = prefetch(
            "analytics",
            queryset=AIAnalytics.objects.filter(
                created_at__gte=datetime.now() - timedelta(days=30)
            ).order_by(AIAnalytics.created_at.desc())
        )
        
        return (Source.objects
            .select_related("platform")
            .prefetch_related(
                monitored_prefetch,
                analytics_prefetch,
                "tracked_in_sources",
            )
            .filter(id=pk)
            .to_select()
        )
    """)
    
    print("\n‚úÖ –ß—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —ç—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä:")
    print("   1. –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ queryset –¥–ª—è prefetch")
    print("   2. –£—Å–ª–æ–≤–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    print("   3. –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ prefetch —Å —Ä–∞–∑–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏")
    print("   4. –ö–æ–º–±–∏–Ω–∞—Ü–∏—è select_related –∏ prefetch_related")
    print("   5. –ß–∏—Ç–∞–µ–º–∞—è —Ü–µ–ø–æ—á–∫–∞ –º–µ—Ç–æ–¥–æ–≤")
    print("   6. –ü—É–±–ª–∏—á–Ω—ã–π API to_select()")


def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–π"""
    print("\n")
    print("üéØ" * 40)
    print("–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –£–õ–£–ß–®–ï–ù–ù–û–ì–û API")
    print("üéØ" * 40)
    
    asyncio.run(test_prefetch_with_queryset())
    test_to_select_public_api()
    test_admin_views_pattern()
    test_comparison()
    test_flexibility_demo()
    test_real_world_example()
    
    print("\n" + "="*80)
    print("‚úÖ –í–°–ï –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò –ó–ê–í–ï–†–®–ï–ù–´")
    print("="*80)
    print("\nüìù –ò–¢–û–ì–û:")
    print("  1. ‚úÖ prefetch() –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç queryset= (Django-style)")
    print("  2. ‚úÖ –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ to_select() –≤–º–µ—Å—Ç–æ _build_statement()")
    print("  3. ‚úÖ Admin views –Ω–µ —Ç—Ä–µ–±—É—é—Ç async")
    print("  4. ‚úÖ –ì–∏–±–∫–∏–µ –∏ —á–∏—Ç–∞–µ–º—ã–µ –∑–∞–ø—Ä–æ—Å—ã")
    print("  5. ‚úÖ –ü–æ–ª–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å Django –ø–æ–¥—Ö–æ–¥–æ–º")
    print("\n")


if __name__ == "__main__":
    main()
