openapi: 3.0.0
info:
  title: Social Media AI Manager API
  description: |
    API for managing social media accounts, analyzing content with AI, and user management.
    This API provides endpoints for authentication, user management, social media integration,
    and AI-powered content analysis.
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com

servers:
  - url: http://localhost:8000/api/v1
    description: Local development server
  - url: https://api.yourdomain.com/api/v1
    description: Production server

components:
  securitySchemes:
    OAuth2PasswordBearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
  
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        email:
          type: string
          format: email
        is_active:
          type: boolean
        is_superuser:
          type: boolean
        created_at:
          type: string
          format: date-time
    
    Token:
      type: object
      properties:
        access_token:
          type: string
        token_type:
          type: string
        expires_at:
          type: string
          format: date-time
    
    TokenWithRefresh:
      allOf:
        - $ref: '#/components/schemas/Token'
        - type: object
          properties:
            refresh_token:
              type: string
    
    SocialAccount:
      type: object
      properties:
        id:
          type: integer
        platform:
          type: string
        platform_user_id:
          type: string
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time
    
    AIAnalysisRequest:
      type: object
      required:
        - text
      properties:
        text:
          type: string
        source_id:
          type: string
        source_type:
          type: string
        background:
          type: boolean
          default: false
    
    SentimentAnalysisResult:
      type: object
      properties:
        sentiment:
          type: string
          enum: [positive, neutral, negative]
        confidence:
          type: number
          format: float
        analysis_date:
          type: string
          format: date-time

    Error:
      type: object
      properties:
        detail:
          type: string

  parameters:
    skip:
      name: skip
      in: query
      description: Number of records to skip
      required: false
      schema:
        type: integer
        default: 0
        minimum: 0

    limit:
      name: limit
      in: query
      description: Maximum number of records to return
      required: false
      schema:
        type: integer
        default: 100
        maximum: 100
        minimum: 1

security:
  - OAuth2PasswordBearer: []

paths:
  /auth/register:
    post:
      tags: [auth]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
                  minLength: 8
      responses:
        '200':
          description: Successful registration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenWithRefresh'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login:
    post:
      tags: [auth]
      summary: Login with username/email and password
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenWithRefresh'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/me:
    get:
      tags: [user]
      summary: Get current user information
      security:
        - OAuth2PasswordBearer: []
      responses:
        '200':
          description: User information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/roles:
    get:
      tags: [user]
      summary: Get paginated list of all roles with permissions
      security:
        - OAuth2PasswordBearer: []
      parameters:
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: List of roles retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  total:
                    type: integer
                  page:
                    type: integer
                  size:
                    type: integer
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /social/accounts:
    get:
      tags: [social]
      summary: Get user's social media accounts
      security:
        - OAuth2PasswordBearer: []
      parameters:
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: List of social media accounts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SocialAccount'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags: [social]
      summary: Add a new social media account
      security:
        - OAuth2PasswordBearer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - platform
                - platform_user_id
              properties:
                platform:
                  type: string
                platform_user_id:
                  type: string
                is_active:
                  type: boolean
                  default: true
      responses:
        '200':
          description: Social account created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SocialAccount'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /ai/analyze/sentiment:
    post:
      tags: [ai]
      summary: Analyze sentiment of text content
      security:
        - OAuth2PasswordBearer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AIAnalysisRequest'
      responses:
        '200':
          description: Sentiment analysis completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SentimentAnalysisResult'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
