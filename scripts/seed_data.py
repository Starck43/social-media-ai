#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ë–î —Ç–µ—Å—Ç–æ–≤—ã–º–∏ LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏ –∏ —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏.
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python scripts/seed_data.py
"""
import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from app.models import LLMProvider, BotScenario


async def seed_llm_providers():
    """–°–æ–∑–¥–∞–Ω–∏–µ LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤."""
    print("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤...")
    
    providers = [
        {
            "name": "DeepSeek Chat",
            "description": "DeepSeek LLM –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞. –ë—ã—Å—Ç—Ä—ã–π –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø–æ —Ü–µ–Ω–µ.",
            "provider_type": "deepseek",
            "api_url": "https://api.deepseek.com/v1/chat/completions",
            "api_key_env": "DEEPSEEK_API_KEY",
            "model_name": "deepseek-chat",
            "capabilities": ["text"],
            "config": {"temperature": 0.2, "max_tokens": 2000},
            "is_active": True
        },
        {
            "name": "OpenAI GPT-3.5 Turbo",
            "description": "OpenAI GPT-3.5 Turbo –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞. –î–æ—Å—Ç—É–ø–Ω–∞—è —Ü–µ–Ω–∞.",
            "provider_type": "openai",
            "api_url": "https://api.openai.com/v1/chat/completions",
            "api_key_env": "OPENAI_API_KEY",
            "model_name": "gpt-3.5-turbo",
            "capabilities": ["text"],
            "config": {"temperature": 0.3, "max_tokens": 2000},
            "is_active": False
        },
        {
            "name": "OpenAI GPT-4 Turbo",
            "description": "OpenAI GPT-4 Turbo –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞. –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ.",
            "provider_type": "openai",
            "api_url": "https://api.openai.com/v1/chat/completions",
            "api_key_env": "OPENAI_API_KEY",
            "model_name": "gpt-4-turbo-preview",
            "capabilities": ["text"],
            "config": {"temperature": 0.2, "max_tokens": 3000},
            "is_active": False
        },
        {
            "name": "OpenAI GPT-4 Vision",
            "description": "OpenAI GPT-4 —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –≤–∏–¥–µ–æ.",
            "provider_type": "openai",
            "api_url": "https://api.openai.com/v1/chat/completions",
            "api_key_env": "OPENAI_API_KEY",
            "model_name": "gpt-4-vision-preview",
            "capabilities": ["text", "image", "video"],
            "config": {"temperature": 0.1, "max_tokens": 3000},
            "is_active": False
        },
        {
            "name": "Anthropic Claude 3",
            "description": "Anthropic Claude 3 –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞. –•–æ—Ä–æ—à–æ –ø–æ–Ω–∏–º–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç.",
            "provider_type": "anthropic",
            "api_url": "https://api.anthropic.com/v1/messages",
            "api_key_env": "ANTHROPIC_API_KEY",
            "model_name": "claude-3-opus-20240229",
            "capabilities": ["text"],
            "config": {"temperature": 0.2, "max_tokens": 2000},
            "is_active": False
        }
    ]
    
    created_providers = {}
    for provider_data in providers:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
            existing = await LLMProvider.objects.filter(name=provider_data["name"])
            if existing:
                provider = existing[0]
                print(f"  ‚ö†Ô∏è  –ü—Ä–æ–≤–∞–π–¥–µ—Ä '{provider.name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                provider = await LLMProvider.objects.create(**provider_data)
                print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {provider.name}")
            
            created_providers[provider.name] = provider
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {provider_data['name']}: {e}")
    
    return created_providers


async def seed_bot_scenarios(providers):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –±–æ—Ç–∞."""
    print("\nü§ñ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –±–æ—Ç–∞...")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    deepseek = providers.get("DeepSeek Chat")
    gpt4v = providers.get("OpenAI GPT-4 Vision")
    
    if not deepseek:
        print("  ‚ö†Ô∏è  DeepSeek –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π")
        all_providers = await LLMProvider.objects.all()
        deepseek = all_providers[0] if all_providers else None
    
    if not deepseek:
        print("  ‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤!")
        return
    
    scenarios = [
        {
            "name": "–ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–æ–≤",
            "description": "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏, –≤—ã—è–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö –∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —Ç–µ–Ω–¥–µ–Ω—Ü–∏–π",
            "content_types": ["posts", "comments"],
            "analysis_types": ["sentiment", "topics"],
            "scope": {
                "sentiment_config": {
                    "categories": ["positive", "negative", "neutral"],
                    "track_emotions": True
                },
                "topics_config": {
                    "max_topics": 5
                }
            },
            "ai_prompt": """–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç–µ –∏–∑ {platform}:

–ö–û–ù–¢–ï–ù–¢:
{content}

–û–ø—Ä–µ–¥–µ–ª–∏:
1. –û–±—â–∏–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –Ω–∞—Å—Ç—Ä–æ–π (–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π/–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π/–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π)
2. –ü—Ä–µ–æ–±–ª–∞–¥–∞—é—â–∏–µ —ç–º–æ—Ü–∏–∏ (—Ä–∞–¥–æ—Å—Ç—å, —Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–∏–µ, –≥–Ω–µ–≤, –∏–Ω—Ç–µ—Ä–µ—Å –∏ —Ç.–¥.)
3. –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã, –≤—ã–∑—ã–≤–∞—é—â–∏–µ –ø–æ–∑–∏—Ç–∏–≤–Ω—É—é —Ä–µ–∞–∫—Ü–∏—é
4. –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã, –≤—ã–∑—ã–≤–∞—é—â–∏–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω—É—é —Ä–µ–∞–∫—Ü–∏—é
5. –ö–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã –∏ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏

–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ —Å –ø–æ–ª—è–º–∏: overall_sentiment, dominant_emotions, positive_topics, negative_topics, key_phrases""",
            "action_type": "NOTIFICATION",
            "is_active": True,
            "cooldown_minutes": 60,
            "text_llm_provider_id": deepseek.id,
            "image_llm_provider_id": None,
            "video_llm_provider_id": None
        },
        {
            "name": "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –±—Ä–µ–Ω–¥–∞",
            "description": "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –±—Ä–µ–Ω–¥–∞/–ø—Ä–æ–¥—É–∫—Ç–∞, –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏",
            "content_types": ["posts", "comments", "mentions"],
            "analysis_types": ["sentiment", "keywords", "brand_mentions"],
            "scope": {
                "keywords_config": {
                    "track_keywords": True,
                    "min_mentions": 2
                }
            },
            "ai_prompt": """–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –±—Ä–µ–Ω–¥–∞/–ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ –∏–∑ {platform}:

–ö–û–ù–¢–ï–ù–¢:
{content}

–î–ª—è –∫–∞–∂–¥–æ–≥–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–∏:
1. –ö–æ–Ω—Ç–µ–∫—Å—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π/–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π/–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π/–≤–æ–ø—Ä–æ—Å)
2. –°–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–µ–º—ã –∏ –ø—Ä–æ–±–ª–µ–º—ã
3. –ï—Å—Ç—å –ª–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º–∏
4. –¢–∏–ø–∏—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø—Ä–æ–±–ª–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
5. –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–µ–ø—É—Ç–∞—Ü–∏–∏

–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ.""",
            "action_type": "NOTIFICATION",
            "is_active": True,
            "cooldown_minutes": 30,
            "text_llm_provider_id": deepseek.id,
            "image_llm_provider_id": None,
            "video_llm_provider_id": None
        },
        {
            "name": "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤",
            "description": "–í—ã—è–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–µ–º, –≤–∏—Ä—É—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ —Ä–∞—Å—Ç—É—â–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –∞—É–¥–∏—Ç–æ—Ä–∏–∏",
            "content_types": ["posts", "reactions"],
            "analysis_types": ["trends", "viral_detection", "topics"],
            "scope": {
                "trends_config": {
                    "min_mentions": 3,
                    "time_window": "24h"
                }
            },
            "ai_prompt": """–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ {platform} –∏ –Ω–∞–π–¥–∏ —Ç—Ä–µ–Ω–¥—ã:

–ö–û–ù–¢–ï–ù–¢ ({total_posts} –ø–æ—Å—Ç–æ–≤):
{content}

–û–ø—Ä–µ–¥–µ–ª–∏:
1. –ù–æ–≤—ã–µ —Ç–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–±–∏—Ä–∞—é—Ç –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å
2. –í–∏—Ä—É—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç (–ø–æ—Å—Ç—ã —Å –≤—ã—Å–æ–∫–æ–π –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å—é)
3. –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö –∞—É–¥–∏—Ç–æ—Ä–∏–∏
4. –•–µ—à—Ç–µ–≥–∏ –∏ —Ñ—Ä–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ –∞–∫—Ç–∏–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
5. –ü—Ä–æ–≥–Ω–æ–∑: –∫–∞–∫–∏–µ —Ç–µ–º—ã –±—É–¥—É—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã

–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ.""",
            "action_type": "NOTIFICATION",
            "is_active": True,
            "cooldown_minutes": 120,
            "text_llm_provider_id": deepseek.id,
            "image_llm_provider_id": None,
            "video_llm_provider_id": None
        },
        {
            "name": "–≠–∫—Å–ø—Ä–µ—Å—Å-–∞–Ω–∞–ª–∏–∑",
            "description": "–ë—ã—Å—Ç—Ä—ã–π –æ–±–∑–æ—Ä: –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
            "content_types": ["posts"],
            "analysis_types": ["sentiment", "topics"],
            "scope": {
                "topics_config": {
                    "max_topics": 3
                }
            },
            "ai_prompt": """–°–¥–µ–ª–∞–π –±—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ {platform}:

–ö–û–ù–¢–ï–ù–¢ ({total_posts} –ø–æ—Å—Ç–æ–≤):
{content}

–ö—Ä–∞—Ç–∫–æ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è):
1. –û —á—ë–º –≥–æ–≤–æ—Ä—è—Ç (–≥–ª–∞–≤–Ω—ã–µ —Ç–µ–º—ã)
2. –ö–∞–∫ –≥–æ–≤–æ—Ä—è—Ç (–æ–±—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ)
3. –ß—Ç–æ –≤—ã–¥–µ–ª—è–µ—Ç—Å—è (–Ω–µ–æ–±—ã—á–Ω–æ–µ –∏–ª–∏ –≤–∞–∂–Ω–æ–µ)

–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ —Å –ø–æ–ª—è–º–∏: main_topics, overall_mood, highlights""",
            "action_type": None,
            "is_active": True,
            "cooldown_minutes": 15,
            "text_llm_provider_id": deepseek.id,
            "image_llm_provider_id": None,
            "video_llm_provider_id": None
        }
    ]
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å GPT-4 Vision, –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π —Å –º—É–ª—å—Ç–∏–º–µ–¥–∏–∞
    if gpt4v:
        scenarios.append({
            "name": "–ü–æ–ª–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑",
            "description": "–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ)",
            "content_types": ["posts", "comments", "videos", "reactions"],
            "analysis_types": ["sentiment", "topics", "engagement", "trends"],
            "scope": {
                "sentiment_config": {"track_emotions": True},
                "topics_config": {"max_topics": 10},
                "engagement_config": {"metrics": ["likes", "comments", "shares"]}
            },
            "ai_prompt": """–í—ã–ø–æ–ª–Ω–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ {platform}.

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å, —Ç–µ–º—ã, –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å, –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç.
–î–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é.

–í–µ—Ä–Ω–∏ –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ.""",
            "action_type": "NOTIFICATION",
            "is_active": True,
            "cooldown_minutes": 240,
            "text_llm_provider_id": deepseek.id,
            "image_llm_provider_id": gpt4v.id,
            "video_llm_provider_id": gpt4v.id
        })
    
    for scenario_data in scenarios:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
            existing = await BotScenario.objects.filter(name=scenario_data["name"])
            if existing:
                print(f"  ‚ö†Ô∏è  –°—Ü–µ–Ω–∞—Ä–∏–π '{scenario_data['name']}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                scenario = await BotScenario.objects.create(**scenario_data)
                print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π: {scenario.name}")
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è {scenario_data['name']}: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("="*70)
    print("üå± –ó–ê–ü–û–õ–ù–ï–ù–ò–ï –ë–ê–ó–´ –î–ê–ù–ù–´–• –¢–ï–°–¢–û–í–´–ú–ò –î–ê–ù–ù–´–ú–ò")
    print("="*70)
    print()
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        providers = await seed_llm_providers()
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏
        await seed_bot_scenarios(providers)
        
        print("\n" + "="*70)
        print("‚úÖ –î–ê–ù–ù–´–ï –£–°–ü–ï–®–ù–û –î–û–ë–ê–í–õ–ï–ù–´!")
        print("="*70)
        print()
        print("–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("  1. –î–æ–±–∞–≤—å—Ç–µ API –∫–ª—é—á–∏ –≤ .env —Ñ–∞–π–ª:")
        print("     DEEPSEEK_API_KEY=your_key_here")
        print("     OPENAI_API_KEY=your_key_here")
        print()
        print("  2. –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –Ω—É–∂–Ω—ã–µ LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:")
        print("     http://localhost:8000/admin/llmprovider/list")
        print()
        print("  3. –î–æ–±–∞–≤—å—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (Source) –∏ –ø—Ä–∏–≤—è–∂–∏—Ç–µ –∫ —Å—Ü–µ–Ω–∞—Ä–∏—è–º:")
        print("     http://localhost:8000/admin/source/list")
        print()
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return 1
    
    return 0


if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
