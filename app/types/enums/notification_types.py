"""Notification-related enum types."""
from enum import Enum

from app.utils.db_enums import database_enum


@database_enum
class NotificationType(Enum):
	"""Types of system notifications."""
	# Format: NAME = ("db_value", "Display Name", "Emoji")
	REPORT_READY = ("report_ready", "–û—Ç—á–µ—Ç –≥–æ—Ç–æ–≤", "üìä")
	MOOD_CHANGE = ("mood_change", "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è", "üòäüòû")
	TREND_ALERT = ("trend_alert", "–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ —Ç—Ä–µ–Ω–¥–µ", "üìà")
	TOPIC_RESUMED = ("topic_resumed", "–¢–µ–º–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞", "üîÑ")
	API_ERROR = ("api_error", "–û—à–∏–±–∫–∞ API", "‚ùå")
	CONNECTION_ERROR = ("connection_error", "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è", "üîå")
	SOURCE_INACTIVE = ("source_inactive", "–ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω", "‚è∏Ô∏è")
	RATE_LIMIT_WARNING = ("rate_limit_warning", "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ª–∏–º–∏—Ç–µ", "‚ö†Ô∏è")
	BOT_COMMENT = ("bot_comment", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –±–æ—Ç–∞", "ü§ñüí¨")
	BOT_SKIPPED = ("bot_skipped", "–ë–æ—Ç –ø—Ä–æ–ø—É—â–µ–Ω", "‚è≠Ô∏è")
	SYSTEM_BACKUP = ("system_backup", "–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ", "üíæ")
	SYSTEM_UPDATE = ("system_update", "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã", "üîÑ")
	SUBSCRIBED_ACTIVITY = ("subscribed_activity", "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏", "üîî")
	KEYWORD_MENTION = ("keyword_mention", "–£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞", "üîë")
	
	def __init__(self, db_value, display_name, emoji):
		self._db_value = db_value
		self._display_name = display_name
		self._emoji = emoji

	@property
	def db_value(self):
		return self._db_value

	@property
	def display_name(self):
		return self._display_name

	@property
	def emoji(self):
		return self._emoji
	
	@property
	def label(self):
		"""Get label with emoji."""
		return f"{self._emoji} {self._display_name}"
	
	@classmethod
	def choices(cls, use_db_value: bool = False):
		"""Get choices for form fields (store_as_name=True by default)."""
		if use_db_value:
			return [(n.db_value, n.label) for n in cls]
		return [(n.name, n.label) for n in cls]
	
	@classmethod
	def get_by_value(cls, value: str):
		"""Get enum by database value."""
		for notification in cls:
			if notification.db_value == value:
				return notification
		return None
	
	@classmethod
	def get_by_name(cls, name: str):
		"""Get enum by name."""
		try:
			return cls[name]
		except KeyError:
			return None
